interface MonacoLanguage {
  value: string;
  name: string;
}

const monacoLanguages: MonacoLanguage[] = [
  { value: 'abap', name: 'ABAP' },
  { value: 'apex', name: 'Apex' },
  { value: 'azcli', name: 'Azure CLI' },
  { value: 'bat', name: 'Batch' },
  { value: 'bicep', name: 'Bicep' },
  { value: 'c', name: 'C' },
  { value: 'cameligo', name: 'Cameligo' },
  { value: 'clojure', name: 'Clojure' },
  { value: 'coffeescript', name: 'CoffeeScript' },
  { value: 'cpp', name: 'C++' },
  { value: 'csharp', name: 'C#' },
  { value: 'csp', name: 'CSP' },
  { value: 'css', name: 'CSS' },
  { value: 'cypher', name: 'Cypher' },
  { value: 'dart', name: 'Dart' },
  { value: 'dockerfile', name: 'Dockerfile' },
  { value: 'ecl', name: 'ECL' },
  { value: 'elixir', name: 'Elixir' },
  { value: 'flow9', name: 'Flow9' },
  { value: 'fsharp', name: 'F#' },
  { value: 'go', name: 'Go' },
  { value: 'graphql', name: 'GraphQL' },
  { value: 'handlebars', name: 'Handlebars' },
  { value: 'hcl', name: 'HCL' },
  { value: 'html', name: 'HTML' },
  { value: 'ini', name: 'INI' },
  { value: 'java', name: 'Java' },
  { value: 'javascript', name: 'JavaScript' },
  { value: 'julia', name: 'Julia' },
  { value: 'kotlin', name: 'Kotlin' },
  { value: 'less', name: 'Less' },
  { value: 'lexon', name: 'Lexon' },
  { value: 'lua', name: 'Lua' },
  { value: 'm3', name: 'M3' },
  { value: 'markdown', name: 'Markdown' },
  { value: 'mips', name: 'MIPS' },
  { value: 'msdax', name: 'MSDAX' },
  { value: 'mysql', name: 'MySQL' },
  { value: 'objective-c', name: 'Objective-C' },
  { value: 'pascal', name: 'Pascal' },
  { value: 'pascaligo', name: 'Pascaligo' },
  { value: 'perl', name: 'Perl' },
  { value: 'pgsql', name: 'PostgreSQL' },
  { value: 'php', name: 'PHP' },
  { value: 'pla', name: 'PLA' },
  { value: 'plaintext', name: 'Plain Text' },
  { value: 'postiats', name: 'Postiats' },
  { value: 'powerquery', name: 'Power Query' },
  { value: 'powershell', name: 'PowerShell' },
  { value: 'proto', name: 'Protobuf' },
  { value: 'pug', name: 'Pug' },
  { value: 'python', name: 'Python' },
  { value: 'qsharp', name: 'Q#' },
  { value: 'r', name: 'R' },
  { value: 'razor', name: 'Razor' },
  { value: 'redis', name: 'Redis' },
  { value: 'redshift', name: 'Redshift' },
  { value: 'restructuredtext', name: 'reStructuredText' },
  { value: 'ruby', name: 'Ruby' },
  { value: 'rust', name: 'Rust' },
  { value: 'sb', name: 'SB' },
  { value: 'scala', name: 'Scala' },
  { value: 'scheme', name: 'Scheme' },
  { value: 'scss', name: 'SCSS' },
  { value: 'shell', name: 'Shell' },
  { value: 'solidity', name: 'Solidity' },
  { value: 'sophia', name: 'Sophia' },
  { value: 'sparql', name: 'SPARQL' },
  { value: 'sql', name: 'SQL' },
  { value: 'st', name: 'Structured Text' },
  { value: 'swift', name: 'Swift' },
  { value: 'systemverilog', name: 'SystemVerilog' },
  { value: 'tcl', name: 'Tcl' },
  { value: 'twig', name: 'Twig' },
  { value: 'typescript', name: 'TypeScript' },
  { value: 'vb', name: 'Visual Basic' },
  { value: 'verilog', name: 'Verilog' },
  { value: 'xml', name: 'XML' },
  { value: 'yaml', name: 'YAML' },
];

export default monacoLanguages;

export type MonacoLanguageValue = (typeof monacoLanguages)[number]['value'];
